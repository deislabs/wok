use crate::grpc::{
    image_service_server::ImageService, ListImagesRequest, ListImagesResponse, PullImageRequest,
    PullImageResponse,
};
use std::ffi::CString;
use std::path::PathBuf;
use tonic::{Request, Response, Status};

use crate::runtime::CriResult;
use crate::util;

pub fn default_image_dir() -> PathBuf {
    dirs::home_dir()
        .expect("cannot get home directory")
        .join(".wok")
        .join("modules")
}

/// Implement a CRI Image Service
#[derive(Debug, Default)]
pub struct CriImageService {
    root_dir: PathBuf,
}

impl CriImageService {
    pub fn new(root_dir: PathBuf) -> Self {
        util::ensure_root_dir(&root_dir)
            .expect("cannot create root directory for image service");
        CriImageService { root_dir }
    }

    fn pull_module(&self, module_ref: &str) -> Result<(), failure::Error> {
        // currently, the library only accepts modules tagged in the following structure:
        // <registry>/<repository>:<tag>
        // for example: webassembly.azurecr.io/hello:v1
        let mut registry_parts = module_ref.split('/');
        let reg = registry_parts.next().unwrap();
        let mut repo_parts = registry_parts.next().unwrap().split(':');
        let repo = repo_parts.next().unwrap();
        let tag = repo_parts.next().unwrap();

        let pull_path = self.root_dir.join(reg).join(repo).join(tag);

        std::fs::create_dir_all(&pull_path)?;
        let target_mod = pull_path.join("module.wasm");
        pull_wasm(module_ref, target_mod.to_str().unwrap())
    }
}

#[tonic::async_trait]
impl ImageService for CriImageService {
    async fn list_images(
        &self,
        _request: Request<ListImagesRequest>,
    ) -> CriResult<ListImagesResponse> {
        Err(Status::unimplemented("BOO"))
    }

    async fn pull_image(&self, request: Request<PullImageRequest>) -> CriResult<PullImageResponse> {
        let image_ref = request.into_inner().image.unwrap().image;

        self.pull_module(&image_ref).expect("cannot pull module");
        let resp = PullImageResponse { image_ref };

        Ok(Response::new(resp))
    }
}

pub fn pull_wasm(reference: &str, file: &str) -> Result<(), failure::Error> {
    println!("pulling {} into {}", reference, file);
    let c_ref = CString::new(reference)?;
    let c_file = CString::new(file)?;

    let go_str_ref = GoString {
        p: c_ref.as_ptr(),
        n: c_ref.as_bytes().len() as isize,
    };
    let go_str_file = GoString {
        p: c_file.as_ptr(),
        n: c_file.as_bytes().len() as isize,
    };

    let result = unsafe { Pull(go_str_ref, go_str_file) };
    match result {
        0 => Ok(()),
        _ => Err(failure::Error::from(OCIError::Custom(
            "cannot pull module".into(),
        ))),
    }
}

#[test]
fn test_pull_wasm() {
    // this is a public registry, so this test is both making sure the library is working,
    // as well as ensuring the registry is publicly accessible
    let module = "webassembly.azurecr.io/hello-wasm:v1";
    pull_wasm(module, "target/pulled.wasm").unwrap();
}

#[derive(Debug)]
pub enum OCIError {
    Custom(String),
    Io(std::io::Error),
    Nul(std::ffi::NulError),
}

impl From<std::io::Error> for OCIError {
    fn from(err: std::io::Error) -> Self {
        OCIError::Io(err)
    }
}

impl From<std::ffi::NulError> for OCIError {
    fn from(err: std::ffi::NulError) -> Self {
        OCIError::Nul(err)
    }
}

impl std::fmt::Display for OCIError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self)
    }
}

impl std::error::Error for OCIError {
    fn cause(&self) -> Option<&dyn std::error::Error> {
        Some(self)
    }
}

/* automatically generated by rust-bindgen */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[allow(non_camel_case_types)]
pub type wchar_t = ::std::os::raw::c_int;
#[allow(non_camel_case_types)]
pub type max_align_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GoString_ {
    pub p: *const ::std::os::raw::c_char,
    pub n: isize,
}
#[test]
#[allow(non_snake_case)]
fn bindgen_test_layout__GoString_() {
    assert_eq!(
        ::std::mem::size_of::<_GoString_>(),
        16usize,
        concat!("Size of: ", stringify!(_GoString_))
    );
    assert_eq!(
        ::std::mem::align_of::<_GoString_>(),
        8usize,
        concat!("Alignment of ", stringify!(_GoString_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GoString_>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GoString_),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GoString_>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GoString_),
            "::",
            stringify!(n)
        )
    );
}
pub type GoInt8 = ::std::os::raw::c_schar;
pub type GoUint8 = ::std::os::raw::c_uchar;
pub type GoInt16 = ::std::os::raw::c_short;
pub type GoUint16 = ::std::os::raw::c_ushort;
pub type GoInt32 = ::std::os::raw::c_int;
pub type GoUint32 = ::std::os::raw::c_uint;
pub type GoInt64 = ::std::os::raw::c_longlong;
pub type GoUint64 = ::std::os::raw::c_ulonglong;
pub type GoInt = GoInt64;
pub type GoUint = GoUint64;
pub type GoUintptr = ::std::os::raw::c_ulong;
pub type GoFloat32 = f32;
pub type GoFloat64 = f64;
pub type GoComplex64 = __BindgenComplex<f32>;
pub type GoComplex128 = __BindgenComplex<f64>;
#[allow(non_camel_case_types)]
pub type _check_for_64_bit_pointer_matching_GoInt = [::std::os::raw::c_char; 1usize];
pub type GoString = _GoString_;
pub type GoMap = *mut ::std::os::raw::c_void;
pub type GoChan = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoInterface {
    pub t: *mut ::std::os::raw::c_void,
    pub v: *mut ::std::os::raw::c_void,
}
#[test]
#[allow(non_snake_case)]
fn bindgen_test_layout_GoInterface() {
    assert_eq!(
        ::std::mem::size_of::<GoInterface>(),
        16usize,
        concat!("Size of: ", stringify!(GoInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<GoInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(GoInterface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoInterface>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GoInterface),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoInterface>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GoInterface),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoSlice {
    pub data: *mut ::std::os::raw::c_void,
    pub len: GoInt,
    pub cap: GoInt,
}
#[allow(non_snake_case)]
#[test]
fn bindgen_test_layout_GoSlice() {
    assert_eq!(
        ::std::mem::size_of::<GoSlice>(),
        24usize,
        concat!("Size of: ", stringify!(GoSlice))
    );
    assert_eq!(
        ::std::mem::align_of::<GoSlice>(),
        8usize,
        concat!("Alignment of ", stringify!(GoSlice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).cap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(cap)
        )
    );
}
extern "C" {
    pub fn Pull(p0: GoString, p1: GoString) -> GoInt64;
}
